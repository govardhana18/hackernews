{"ast":null,"code":"var _jsxFileName = \"/Library/WebServer/Documents/React/hackernews/src/containers/StoriesList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { getStoryIds } from '../services';\nimport { Loader } from '../components/actions/Loader';\nimport { AlertCard } from '../components/cards/AlertCard';\nimport { CompleteStoryCard } from '../components/cards/CompleteStoryCard';\nimport * as constants from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StoriesList = () => {\n  _s();\n\n  const [storyIds, setStoryIds] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    console.log(\"starting...\");\n    getStoryIds().then(data => {\n      setStoryIds(data.slice(0, constants.MAX_STORIES));\n      setLoading(false);\n    }).catch(err => {\n      setLoading(false);\n      console.log(\"failed to get storyIds\");\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading === true ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: storyIds.length === 0 ? /*#__PURE__*/_jsxDEV(AlertCard, {\n        alert: \"No stories found, try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this) : storyIds.map(sid => /*#__PURE__*/_jsxDEV(CompleteStoryCard, {\n        storyId: sid\n      }, sid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 44\n      }, this))\n    }, void 0, false)\n  }, void 0, false);\n};\n\n_s(StoriesList, \"ClrMEXmGjKAjBg8QUuwjG+WDSD8=\");\n\n_c = StoriesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoriesList\");","map":{"version":3,"sources":["/Library/WebServer/Documents/React/hackernews/src/containers/StoriesList.jsx"],"names":["useState","useEffect","getStoryIds","Loader","AlertCard","CompleteStoryCard","constants","StoriesList","storyIds","setStoryIds","loading","setLoading","console","log","then","data","slice","MAX_STORIES","catch","err","length","map","sid"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,8BAAvB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,iBAAT,QAAkC,uCAAlC;AACA,OAAO,KAAKC,SAAZ,MAA2B,cAA3B;;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAX,IAAAA,WAAW,GAAGY,IAAd,CAAmBC,IAAI,IAAE;AACrBN,MAAAA,WAAW,CAACM,IAAI,CAACC,KAAL,CAAW,CAAX,EAAaV,SAAS,CAACW,WAAvB,CAAD,CAAX;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAHD,EAGGO,KAHH,CAGSC,GAAG,IAAE;AACVR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,KAND;AAOH,GATQ,EASN,EATM,CAAT;AAWA,sBACI;AAAA,cACKH,OAAO,KAAK,IAAZ,gBACG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADH,gBAGG;AAAA,gBACKF,QAAQ,CAACY,MAAT,KAAoB,CAApB,gBACG,QAAC,SAAD;AAAW,QAAA,KAAK,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,cADH,GAGGZ,QAAQ,CAACa,GAAT,CAAaC,GAAG,iBAAG,QAAC,iBAAD;AAA6B,QAAA,OAAO,EAAEA;AAAtC,SAAwBA,GAAxB;AAAA;AAAA;AAAA;AAAA,cAAnB;AAJR;AAJR,mBADJ;AAeH,CA7BM;;GAAMf,W;;KAAAA,W","sourcesContent":["import { useState, useEffect } from 'react';\nimport { getStoryIds } from '../services';\nimport { Loader } from '../components/actions/Loader';\nimport { AlertCard } from '../components/cards/AlertCard';\nimport { CompleteStoryCard } from '../components/cards/CompleteStoryCard';\nimport * as constants from '../constants';\n\nexport const StoriesList = () => {\n    const [storyIds, setStoryIds] = useState([]);\n    const [loading, setLoading] = useState(true);\n    useEffect(() => {\n        console.log(\"starting...\");\n        getStoryIds().then(data=>{\n            setStoryIds(data.slice(0,constants.MAX_STORIES))        \n            setLoading(false)\n        }).catch(err=>{\n            setLoading(false);\n            console.log(\"failed to get storyIds\");\n        })\n    }, [])\n\n    return (\n        <>\n            {loading === true?\n                <Loader/>\n            :\n                <>\n                    {storyIds.length === 0 ?\n                        <AlertCard alert=\"No stories found, try again.\"/>\n                    :   \n                        storyIds.map(sid=> <CompleteStoryCard key={sid} storyId={sid}/>)\n                    }\n                </>\n            }   \n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}